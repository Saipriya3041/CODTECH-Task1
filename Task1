import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
# Load the dataset from a URL
data_url = "/content/BostonHousing.csv"
data = pd.read_csv(data_url)
data
# Features and target
X = data[['crim', 'rm', 'age', 'tax']]  # Example features
y = data['medv']  # Target variable (median value of owner-occupied homes in $1000s)
# Check for missing values
print(data.isnull().sum())
 #Handle missing values (example: drop rows with NaN)
data = data.dropna()  # or use data.fillna(data.mean()) to fill with mean
# Features and target
X = data[['crim', 'rm', 'age', 'tax']]  # Example features
y = data['medv']  # Target variable (median value of owner-occupied homes in $1000s)
# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
# Predict on the test set
y_pred = model.predict(X_test)
# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'RÂ² Score: {r2}')
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Housing Prices')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # Ideal line
plt.show()
